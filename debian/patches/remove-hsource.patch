diff --git a/io/swig/io/vview.py b/io/swig/io/vview.py
index 8a236af..a24c725 100644
--- a/io/swig/io/vview.py
+++ b/io/swig/io/vview.py
@@ -771,45 +771,6 @@ def makeConvexSourceClass():
 
 
 
-class Hsource(VTKPythonAlgorithmBase):
-    def __init__(self, data):
-        from vtk.numpy_interface import algorithms as algs
-        algs.VTKPythonAlgorithmBase.__init__(self,
-                                             nInputPorts=0,
-                                             nOutputPorts=1,
-                                             outputType='vtkPolyData')
-        self._data = data
-        self._raw_times = self._data[:, 0]
-        self._times = list(set(self._raw_times))
-        self._times.sort()
-
-    def RequestInformation(self, request, inInfo, outInfo):
-
-        info = outInfo[0].GetInformationObject(0)
-
-        info.Set(vtk.vtkStreamingDemandDrivenPipeline.TIME_STEPS(),
-                 self._times,
-                 len(self._times))
-        info.Set(vtk.vtkStreamingDemandDrivenPipeline.TIME_RANGE(),
-                 [self._times[0], self._times[-1]], 2)
-
-        return 1
-
-    def RequestData(self, request, inInfo, outInfo):
-        from vtk.numpy_interface import dataset_adapter as dsa
-
-        info = outInfo.GetInformationObject(0)
-        output = dsa.WrapDataObject(vtk.vtkPolyData.GetData(outInfo))
-
-        # The time step requested
-        t = info.Get(vtk.vtkStreamingDemandDrivenPipeline.UPDATE_TIME_STEP())
-
-        id_t = numpy.where(self._times[:] == t)
-        self.pos_data = self._data[id_t, :]
-        v = dsa.numpyTovtkDataArray(self.pos_data)
-        v.SetName("data")
-        output.GetPointData().SetVectors(v)
-
 # Read file and open VTK interaction window
 
 class VView(object):
